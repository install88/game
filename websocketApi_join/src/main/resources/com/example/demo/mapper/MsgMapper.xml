<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.MsgMapper">    
	<insert id="msgSave" parameterType="MsgVO" useGeneratedKeys="true" keyProperty="msg_ID" keyColumn="msg_id">
		insert into message(msg_from, msg_to, msg_content, msg_status)
		values(#{msg_from, jdbcType=VARCHAR}, #{msg_to, jdbcType=VARCHAR}, #{msg_content, jdbcType=VARCHAR}, #{msg_status, jdbcType=INTEGER})
	</insert> 
	
    <select id="getAllFromLastMessage" parameterType="String" resultType="map">
		SELECT * FROM CUSTOMER AS cus
		RIGHT JOIN (SELECT * FROM message msg WHERE msg_time=(select max(msg_time) from message where msg_from=msg.msg_from and msg_to = #{msg_to})) AS m 
		ON cus.userID = m.msg_from;		    
    </select>
    
    <select id="getConversationRecord" parameterType="String" resultType="map">
		SELECT cus_from.username AS msg_from_username ,cus_to.username AS msg_to_username ,msg.msg_content ,msg.msg_status ,msg.msg_time ,msg.msg_to
		FROM (SELECT * FROM customer) AS cus_from RIGHT JOIN (select * from message where (msg_from = #{msg_from} and msg_to = #{msg_to})
													  		  union all
													  		  select * from message where (msg_from = #{msg_to} and msg_to = #{msg_from})
													  		  order by msg_time) as msg ON cus_from.userID = msg.msg_from
									              LEFT JOIN customer cus_to ON cus_to.userID = msg.msg_to;				        
    </select>
    
    <select id="getUnreadCount" parameterType="String" resultType="map">
<!--         select msg_from,count(*) as msg_count from message where msg_to = #{msg_to} and msg_status=0 group by msg_from         -->
		SELECT *,count(*) AS msg_count FROM CUSTOMER AS CUS
		RIGHT JOIN (SELECT msg_from from MESSAGE where msg_to = #{msg_to} and msg_status=0) as MSG
		on CUS.userID = MSG.msg_from
		group by msg_from;        
    </select>   
    
    <select id="searchKeyword" parameterType="MsgVO" resultType="map">
        select msg_from, msg_to, count(*) as msg_count from message where (msg_from = #{msg_from} or msg_to = #{msg_to}) and msg_content like #{msg_content} group by msg_from
    </select>
    
    <select id="getOwnInfo" parameterType="String" resultType="map">
        select username from customer where userID = #{userID}
    </select>    
    
    
	<update  id="msgUpdateStatus" parameterType="MsgVO">
		update message set msg_status=1
		where msg_from = #{msg_from} and msg_to= #{msg_to} and msg_status=0
	</update >     
</mapper>